# This is a sample test plan.
# Every line specifies a command to generate a test case.
# The first column specifies a group name, which is used to give a name for the
# generated test file.
# The second column specifies a command to generate the test case, it could be
# either a `copy` command or a generator with its respective arguments.
# A `copy` command expects a path to a file relatively to the task root.
# A generator could be a source file in Java, C++ or Python, which is compiled
# and executed with the specified arguments.
# Additionally, an argument which is different for every test case, is passed
# at the end. Arguments should be used to generate a uniquely random seed
# inside the generator.
# To generate test cases using test plan use `ocimatic gen-input`


[Subtask 1 - checkers/st1.cpp]
  # Use sample data as test
  1 ; copy statement/sample-1.in

  # Random tests
  2 ; gen_random.py 2 5 10
  2 ; gen_random.py 2 13 100
  2 ; gen_random.py 2 34 100
  2 ; gen_random.py 2 89 100
  3 ; gen_random.py 2 99 100000
  3 ; gen_random.py 2 100 100000


[Subtask 2 - checkers/st2.cpp]
  # Use sample data as test
  1 ; copy statement/sample-2.in

  # Random tests
  2 ; gen_random.py 4 9 10
  2 ; gen_random.py 6 81 100
  2 ; gen_random.py 20 3 10
  2 ; gen_random.py 40 27 100
  2 ; gen_random.py 200 9 150
  2 ; gen_random.py 800 81 500
  2 ; gen_random.py 1000 100 1000
  3 ; gen_random.py 999 99 100000
  3 ; gen_random.py 1000 100 100000


[Subtask 3 - checkers/st3.cpp]
  # Random tests
  1 ; gen_random.py 1024 1024 100000
  1 ; gen_random.py 2048 2048 100000
  1 ; gen_random.py 4096 4096 100000
  1 ; gen_random.py 8192 8192 100000
  1 ; gen_random.py 10000 10000 100000
  2 ; gen_random.py 2049 1024 1024
  2 ; gen_random.py 4097 2048 2048
  2 ; gen_random.py 8193 4096 4096
  2 ; gen_random.py 10000 8192 8192
  2 ; gen_random.py 10000 10000 10000

