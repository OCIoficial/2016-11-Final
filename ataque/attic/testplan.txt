# This is a sample test plan.
# Every line specifies a command to generate a test case.
# The first column specifies a group name, which is used to give a name for the
# generated test file.
# The second column specifies a command to generate the test case, it could be
# either a `copy` command or a generator with its respective arguments.
# A `copy` command expects a path to a file relatively to the task root.
# A generator could be a source file in Java, C++ or Python, which is compiled
# and executed with the specified arguments.
# Additionally, an argument which is different for every test case, is passed
# at the end. Arguments (including this last argument) should be used to generate
# a uniquely random seed inside the generator.
# To generate test cases using test plan use `ocimatic gen-input`


[Subtask 1 - checkers/st1.cpp]
  # Use sample data as test
  1 ; copy statement/sample-1.in

  # Tie
  2 ; single.py 4 4
  2 ; single.py 5 5

  # Attacker
  3 ; single.py 5 4
  3 ; single.py 6 1

  # Defender
  4 ; single.py 4 5
  4 ; single.py 2 6

[Subtask 2 - checkers/st2.cpp]
  # Use sample data as test
  1 ; copy statement/sample-2.in

  # Random tests
  2 ; gen-random.py 2
  2 ; gen-random.py 2
  2 ; gen-random.py 3
  2 ; gen-random.py 3
  2 ; gen-random.py 4
  2 ; gen-random.py 4
  2 ; gen-random.py 5
  2 ; gen-random.py 5
