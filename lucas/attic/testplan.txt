# This is a sample test plan.
# Every line specifies a command to generate a test case.
# The first column specifies a group name, which is used to give a name for the
# generated test file.
# The second column specifies a command to generate the test case, it could be
# either a `copy` command or a generator with its respective arguments.
# A `copy` command expects a path to a file relatively to the task root.
# A generator could be a source file in Java, C++ or Python, which is compiled
# and executed with the specified arguments.
# Additionally, an argument which is different for every test case, is passed
# at the end. Arguments should be used to generate a uniquely random seed
# inside the generator.
# To generate test cases using test plan use `ocimatic gen-input`


[Subtask 1 - checkers/st1.cpp]
  # Use sample data as test
  1 ; copy statement/sample-1.in

  # The second is prefix of the first
  2 ; prefix.py 50 30
  2 ; prefix.py 50 40
  2 ; prefix.py 10 2

[Subtask 2 - checkers/st2.cpp]
  # Use sample data as test
  1 ; copy statement/sample-2.in

  # The first is prefix of the second
  2 ; prefix.py 1 50
  2 ; prefix.py 49 50
  2 ; prefix.py 10 20
  2 ; prefix.py 10 30

[Subtask 3 - checkers/st3.cpp]
  # Use sample data as test
  1 ; copy statement/sample-3.in

  # Different
  2 ; gen-random.py 1 1 0 0
  2 ; gen-random.py 50 50 0 0

  # Common prefix and suffix
  3 ; gen-random.py 3 3 1 1
  3 ; gen-random.py 10 10 3 5
  3 ; gen-random.py 50 50 1 1
  3 ; gen-random.py 50 50 15 25

  # Second is suffix of first
  4 ; gen-random.py 50 50 0 40
  4 ; gen-random.py 50 50 0 18

[Subtask 4 - checkers/st4.cpp]
  # Use sample data as test
  1 ; copy statement/sample-4.in

  # Different
  2 ; gen-random.py 10 20 0 0
  2 ; gen-random.py 50 30 0 0

  # First longer than second
  3 ; gen-random.py 20 10 2 3
  3 ; gen-random.py 50 10 2 3
  3 ; gen-random.py 50 30 10 19

  # Second longer than first
  4 ; gen-random.py 19 20 7 10
  4 ; gen-random.py 30 50 8 9
